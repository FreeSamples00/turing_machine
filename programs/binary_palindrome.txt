# ==================== README ====================
#
#  '#' indicate comments
#
# Symbols:
#  READ SYMBOL: '_' indicates a blank, '*' indicates a wild card
#  WRITE SYMBOL: '_' indicates a deletetion, '*' indicates no change
#  MOVEMENT: 'r' move right, 'l' move left, '*' do not move
#  NEW STATE: '*' do not change state
#
# Instruction example: (space separated)
#  <current_state> <input> <write_symbol> <move_direction> <new_state>
#
# Built in states:
#  'halt-accept': halts processing, input accepted
#  'halt-reject': halts processing, input rejected
#  'halt': halts processing
#  'start': machine is initialized with this state, must define how to start program
#
# ============== PROGRAM DESCRIPTION ==============
# 
#  This program takes inputs of binary strings and determines if they are a palindrome.
#  i.e. '10101' is a palidrome, '11010' is not
# 
#  Program was found here: https://morphett.info/turing/turing.html
#
# ===================== SYNTAX ====================
#
#  '<binary_number>' -> '<bool_output>'
#
# ================= BEGIN PROGRAM =================

# starting state

start 0 _ r 1o
start 1 _ r 1i
start _ _ * accept

# state 0: reads leftmost symbol
0 0 _ r 1o
0 1 _ r 1i
0 _ _ * accept # accepts empty input

# state 1o: find the rightmost symbol
1o _ _ l 2o
1o * * r 1o

# state li: find the rightmost symbol
1i _ _ l 2i
1i * * r 1i

# state 2o: check if the rightmost symbol matches the most recently read left-hand symbol
2o 0 _ l 3
2o _ _ * accept
2o * * * reject

# state 2i: check if the rightmost symbol matches the most recently read left-hand symbol
2i 1 _ l 3
2i _ _ * accept
2i * * * reject

# state 3: 
3 _ _ * accept
3 * * l 4
3 * * l 4
3 _ _ r 0

# state 4: return to left end of remaining input
4 * * l 4
4 _ _ r 0 # Back to the beginning

# accept states
accept * : r accept2
accept2 * ) * halt-accept

# reject states
reject _ : r reject2
reject * _ l reject
reject2 * ( * halt-reject